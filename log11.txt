PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v1;(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))))) 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) | Ref(int) v1 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) | Ref(int) v1 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) | Ref(int) v2 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) | Ref(int) v2 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) | Ref(int) v3 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) | Ref(int) v3 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) | int cnt 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) | int cnt 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) | new(v1, 2) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) | new(v1, 2) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) | new(v2, 3) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) | new(v2, 3) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) | new(v3, 4) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) | new(v3, 4) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) | newLatch(cnt, rH(v2)) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) | newLatch(cnt, rH(v2)) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) | fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) | fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) | fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v1));countDown(cnt)) | wH(v1,rH(v1) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) | fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v1));countDown(cnt)) | wH(v1,rH(v1) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v1));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v1));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) | fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) | print(rH(v1)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v2));countDown(cnt)) | wH(v2,rH(v2) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) | fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) | print(rH(v1)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v2));countDown(cnt)) | wH(v2,rH(v2) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v2));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 5
Execution stack:
(wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v2));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 5
Execution stack:
(wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 3
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
countDown(cnt) | print(rH(v2)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 5
Execution stack:
(print(rH(v3));countDown(cnt)) | wH(v3,rH(v3) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 3
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
countDown(cnt) | print(rH(v2)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 5
Execution stack:
(print(rH(v3));countDown(cnt)) | wH(v3,rH(v3) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 3 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 5
Execution stack:
(print(rH(v3));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 5
Execution stack:
(print(rH(v3));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 4
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 5
Execution stack:
countDown(cnt) | print(rH(v3)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 4
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 5
Execution stack:
countDown(cnt) | print(rH(v3)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 5
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 5
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 
File Table:
Latch table:
1 -> 1

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 5
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 5
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(print(100);(countDown(cnt);print(100))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(countDown(cnt);print(100)) | print(100) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(countDown(cnt);print(100)) | print(100) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(countDown(cnt);print(100)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
(countDown(cnt);print(100)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
print(100) | countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
print(100) | countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
print(100) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 2 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
print(100) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 2 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 2
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 3 30 4 40 5 100 2 100 
File Table:
Latch table:
1 -> 0

PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v1;(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))))) 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) | Ref(int) v1 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) | Ref(int) v1 
Symbol table:
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v2;(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))) 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) | Ref(int) v2 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) | Ref(int) v2 
Symbol table:
v1 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(Ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) | Ref(int) v3 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) | Ref(int) v3 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))) 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) | int cnt 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) | int cnt 
Symbol table:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) | new(v1, 2) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) | new(v1, 2) 
Symbol table:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v2, 3);(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) | new(v2, 3) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) | new(v2, 3) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Heap: 
1-2
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(new(v3, 4);(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) | new(v3, 4) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) | new(v3, 4) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Heap: 
1-2
2-3
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(newLatch(cnt, rH(v2));(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) | newLatch(cnt, rH(v2)) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) | newLatch(cnt, rH(v2)) 
Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:


PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))));(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) | fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) | fork((wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))));(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100)))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(wH(v1,rH(v1) * 10);(print(rH(v1));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) | fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(print(rH(v1));countDown(cnt)) | wH(v1,rH(v1) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) | fork((wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(print(rH(v1));countDown(cnt)) | wH(v1,rH(v1) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-2
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(print(rH(v1));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))));(await(cnt);(print(100);(countDown(cnt);print(100))))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
(print(rH(v1));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(wH(v2,rH(v2) * 10);(print(rH(v2));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) | fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
countDown(cnt) | print(rH(v1)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v2));countDown(cnt)) | wH(v2,rH(v2) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) | fork((wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
countDown(cnt) | print(rH(v1)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v2));countDown(cnt)) | wH(v2,rH(v2) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-3
3-4
Output list:
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v2));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(await(cnt);(print(100);(countDown(cnt);print(100)))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 2
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 3
Execution stack:
(print(rH(v2));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 4
Execution stack:
(wH(v3,rH(v3) * 10);(print(rH(v3));countDown(cnt))) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 
File Table:
Latch table:
1 -> 3

PROGRAM STATE:
ID: 1
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) | print(rH(v2)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v3));countDown(cnt)) | wH(v3,rH(v3) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 1
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 2
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) | print(rH(v2)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v3));countDown(cnt)) | wH(v3,rH(v3) * 10) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-4
Output list:
20 2 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 1
Execution stack:
(print(100);(countDown(cnt);print(100))) | await(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 2 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 3
Execution stack:
countDown(cnt) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 2 30 
File Table:
Latch table:
1 -> 2

PROGRAM STATE:
ID: 4
Execution stack:
(print(rH(v3));countDown(cnt)) 
Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Heap: 
1-20
2-30
3-40
Output list:
20 2 30 
File Table:
Latch table:
1 -> 2

